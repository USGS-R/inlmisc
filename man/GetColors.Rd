% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GetColors.R
\name{GetColors}
\alias{GetColors}
\title{Get Palette Colors}
\usage{
GetColors(n, scheme = "smooth rainbow", alpha = NULL, start = 0,
  end = 1, bias = 1, reverse = FALSE, blind = NULL, gray = FALSE)
}
\arguments{
\item{n}{'integer' count.
Number of colors to be in the palette.
The maximum number of colors in a generated palette is dependent on the specified color scheme,
see \sQuote{Details} section for maximum values.}

\item{scheme}{'character' string.
Name of color scheme, see \sQuote{Details} section for scheme descriptions.
Partial string matching is supported so argument may be abbreviated.}

\item{alpha}{'numeric' number.
Alpha transparency, values range from 0 (fully transparent) to 1 (fully opaque).
Specify as \code{NULL} to exclude the alpha channel value from colors.}

\item{start, end}{'numeric' number.
Starting and ending color level in the palette, respectively.
Specified as a number in the interval from 0 to 1.
Applies only to interpolated color schemes.}

\item{bias}{'numeric' number.
Interpolation bias where larger values result in more widely spaced colors at the high end.
See \code{\link[grDevices]{colorRamp}} function for details.}

\item{reverse}{'logical' flag.
Whether to reverse the color order in the palette.}

\item{blind}{'character' string.
Type of color blindness to simulate: specify \code{"deutan"} for green-blind vision,
\code{"protan"} for red-blind vision, \code{"tritan"} for green-blue-blind vision, or
\code{"monochrome"} for total-color blindness.
A partial-color blindness simulation requires that the \pkg{dichromat} package is available,
see \code{\link[dichromat]{dichromat}} function for additional information.
Partial string matching is supported so argument may be abbreviated.}

\item{gray}{'logical' flag.
Whether to subset/reorder the \code{"bright"}, \code{"high-contrast"}, \code{"vibrant"},
and \code{"muted"} schemes to work well after conversion to gray scale.}
}
\value{
When argument \code{n} is specified the function
  returns an object of class 'inlcol' that inherits behavior from the 'character' class.
  And when \code{n} is unspecified a variant of the \code{GetColors} function is
  returned that has default (formal) argument values set equal to the values specified by the user.

  The inlcol-class object is comprised of a 'character' vector of \code{n} colors in the RGB color system.
  Colors are specified with a string of the form \code{"#RRGGBB"} or \code{"#RRGGBBAA"}
  where \code{RR}, \code{GG}, \code{BB}, and \code{AA} are the
  red, green, blue, and alpha hexadecimal values (00 to FF), respectively.
  Attributes of the returned object include:
  \code{"names"}, the informal names assigned to colors in the palette,
  where \code{NULL} indicates no color names are specified;
  \code{"bad"}, a 'character' string giving the color meant for bad data, in hexadecimal format,
  where \code{NA} indicates no bad color is specified; and
  \code{"call"}, an object of class '\link{call}' giving the unevaluated function call (expression)
  that can be used to reproduce the color palette.
  Use the \code{\link{eval}} function to evaluate the \code{"call"} argument.
  A simple \code{plot} method is provided for the 'inlcol' class that
  shows a palette of colors using a sequence of shaded rectangles,
  see \sQuote{Examples} section for usage.
}
\description{
Create a vector of \code{n} colors from qualitative, diverging, and sequential color schemes.
All colors are defined in sRGB color space.
The color schemes used in this function are included with the permission of their author.
}
\details{
The suggested data type for color schemes and the characteristics of generated palettes are given in the table below.
  [\bold{Type}: is the type of data being represented, either qualitative, diverging, or sequential.
  \bold{Max n}: is the maximum number of colors in a generated palette.
  And the maximum \code{n} value when palette colors are designed for gray-scale conversion is enclosed in parentheses.
  \bold{Bad}: color provided for bad data.
  \bold{Abbreviations}: --, no limit placed on the number of colors in the palette because colors are interpolated]

  \if{html}{\figure{table.svg}{options: alt="Table describing color schemes"}}
  \if{latex}{\figure{table.pdf}}

  Schemes \code{"pale"},  \code{"dark"}, and \code{"ground cover"} are
  intended to be accessed in their entirety and subset using vector element names.
  The very specific \code{"ground cover"} scheme is a color-blind safe version of the
  \href{http://glcf.umd.edu/data/landcover/data.shtml}{AVHRR}
  global land cover classification by Hansen and others (1998).
}
\note{
The sequential color schemes \code{"YlOrBr"} and \code{"iridescent"}
  work well for conversion to gray scale.
}
\examples{
pal <- GetColors(n = 10)
print(pal)
plot(pal)

Fun <- GetColors(scheme = "DEM screen", alpha = 0.9)
filled.contour(datasets::volcano, color.palette = Fun)

# Qualitative color schemes (scheme)
op <- par(mfrow = c(7, 1), oma = c(0, 0, 0, 0))
plot(GetColors(7, scheme = "bright"))
plot(GetColors(5, scheme = "high-contrast"))
plot(GetColors(7, scheme = "vibrant"))
plot(GetColors(9, scheme = "muted"))
plot(GetColors(6, scheme = "pale"))
plot(GetColors(6, scheme = "dark"))
plot(GetColors(9, scheme = "light"))
par(op)

op <- par(oma = c(1, 0, 0, 0), cex = 0.7)
plot(GetColors(14, scheme = "ground cover"))
par(op)

# Diverging color schemes (scheme)
op <- par(mfrow = c(6, 1), oma = c(0, 0, 0, 0))
plot(GetColors( 11, scheme = "sunset"))
plot(GetColors(255, scheme = "sunset"))
plot(GetColors(  9, scheme = "BuRd"))
plot(GetColors(255, scheme = "BuRd"))
plot(GetColors(  9, scheme = "PRGn"))
plot(GetColors(255, scheme = "PRGn"))
par(op)

# Sequential color schemes (scheme)
op <- par(mfrow = c(7, 1), oma = c(0, 0, 0, 0))
plot(GetColors(  9, scheme = "YlOrBr"))
plot(GetColors(255, scheme = "YlOrBr"))
plot(GetColors( 23, scheme = "iridescent"))
plot(GetColors(255, scheme = "iridescent"))
plot(GetColors( 23, scheme = "discrete rainbow"))
plot(GetColors( 34, scheme = "smooth rainbow"))
plot(GetColors(255, scheme = "smooth rainbow"))
par(op)

op <- par(mfrow = c(6, 1), oma = c(0, 0, 0, 0))
plot(GetColors(  7, scheme = "DEM print"))
plot(GetColors(255, scheme = "DEM print"))
plot(GetColors(  6, scheme = "DEM screen"))
plot(GetColors(255, scheme = "DEM screen"))
plot(GetColors(  8, scheme = "DEM poster"))
plot(GetColors(255, scheme = "DEM poster"))
par(op)

# Alpha transparency (alpha)
op <- par(mfrow = c(5, 1), oma = c(0, 0, 0, 0))
plot(GetColors(34, alpha = 1.0))
plot(GetColors(34, alpha = 0.8))
plot(GetColors(34, alpha = 0.6))
plot(GetColors(34, alpha = 0.4))
plot(GetColors(34, alpha = 0.2))
par(op)

# Color levels (start, end)
op <- par(mfrow = c(4, 1), oma = c(0, 0, 0, 0))
plot(GetColors(255, start = 0.0, end = 1.0))
plot(GetColors(255, start = 0.0, end = 0.5))
plot(GetColors(255, start = 0.5, end = 1.0))
plot(GetColors(255, start = 0.3, end = 0.9))
par(op)

# Interpolation bias (bias)
op <- par(mfrow = c(7, 1), oma = c(0, 0, 0, 0))
plot(GetColors(255, bias = 0.4))
plot(GetColors(255, bias = 0.6))
plot(GetColors(255, bias = 0.8))
plot(GetColors(255, bias = 1.0))
plot(GetColors(255, bias = 1.2))
plot(GetColors(255, bias = 1.4))
plot(GetColors(255, bias = 1.6))
par(op)

# Reverse colors (reverse)
op <- par(mfrow = c(4, 1), oma = c(0, 0, 0, 0), cex = 0.7)
plot(GetColors(10, reverse = FALSE))
plot(GetColors(10, reverse = TRUE))
plot(GetColors(10, reverse = FALSE, start = 0.5))
plot(GetColors(10, reverse = TRUE,  start = 0.5))
par(op)

# Color blindness (blind)
op <- par(mfrow = c(5, 1), oma = c(0, 0, 0, 0))
plot(GetColors(34, blind = NULL))
plot(GetColors(34, blind = "deutan"))
plot(GetColors(34, blind = "protan"))
plot(GetColors(34, blind = "tritan"))
plot(GetColors(34, blind = "monochrome"))
par(op)

# Gray-scale preparation (gray)
op <- par(mfrow = c(8, 1), oma = c(0, 0, 0, 0))
plot(GetColors(3, "bright",        gray = TRUE))
plot(GetColors(3, "bright",        gray = TRUE, blind = "monochrome"))
plot(GetColors(5, "high-contrast", gray = TRUE))
plot(GetColors(5, "high-contrast", gray = TRUE, blind = "monochrome"))
plot(GetColors(4, "vibrant",       gray = TRUE))
plot(GetColors(4, "vibrant",       gray = TRUE, blind = "monochrome"))
plot(GetColors(5, "muted",         gray = TRUE))
plot(GetColors(5, "muted",         gray = TRUE, blind = "monochrome"))
par(op)

}
\references{
Dewez, Thomas, 2004, Variations on a DEM palette, accessed October 15, 2018 at
  \url{http://soliton.vm.bytemark.co.uk/pub/cpt-city/td/index.html}

  Hansen, M., DeFries, R., Townshend, J.R.G., and Sohlberg, R., 1998,
  UMD Global Land Cover Classification, 1 Kilometer, 1.0:
  Department of Geography, University of Maryland, College Park, Maryland, 1981-1994.

  Tol, Paul, 2018, Colour Schemes:
  SRON Technical Note, doc. no. SRON/EPS/TN/09-002, issue 3.1, 20 p.,
  accessed September 24, 2018 at \url{https://personal.sron.nl/~pault/data/colourschemes.pdf}.
}
\seealso{
\code{\link{MoveMidpoint}}, \code{\link[grDevices]{col2rgb}}
}
\author{
J.C. Fisher, U.S. Geological Survey, Idaho Water Science Center
}
\keyword{color}
