% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SetHinge.R
\name{SetHinge}
\alias{SetHinge}
\title{Set Hinge Location in Color Palette}
\usage{
SetHinge(x, hinge, scheme = "sunset", alpha = NULL, reverse = FALSE,
  allow_bias = TRUE)
}
\arguments{
\item{x}{'numeric' object that can be passed to the \code{\link{range}}
function with \code{NA}'s removed.
That is, the user's data range (such as, at sea-level).}

\item{hinge}{'numeric' number.
Hinge value in data units.}

\item{scheme}{'character' vector of length 1 or 2, value is recycled as necessary.
Name of color scheme(s).
The color palette is derived from one or two color schemes.
The scheme(s) should be suitable for continuous data types and allow for color interpolation.
See \code{\link{GetColors}} function for a list of possible scheme names.
Argument choices may be abbreviated as long as there is no ambiguity.}

\item{alpha}{'numeric' vector of length 1 or 2, value is recycled as necessary.
Alpha transparency applied separately on either side of the hinge.
Values range from 0 (fully transparent) to 1 (fully opaque).
Specify as \code{NULL} to exclude the alpha channel value from colors.}

\item{reverse}{'logical' vector of length 1 or 2, value is recycled as necessary.
Whether to reverse the order of colors in the scheme(s).
Values applied separately on either side of the hinge.}

\item{allow_bias}{'logical' flag.
Whether to allow bias in the color spacing.}
}
\value{
Returns a 'function' that takes an 'integer' argument
  (the required number of colors) and returns a 'character' vector of colors.
}
\description{
The \emph{hinge} indicates a dramatic color change in a palette
that is typically located at the midpoint of the color range.
An asymmetrical data range can result in an undesired hinge location,
where the location does not necessarily coincide with the break-point in the user's data.
This function is used to specify a hinge location that is appropriate for your data.
}
\examples{
Pal <- SetHinge(x = c(-3, 7), hinge = 0)
Plot <- inlmisc:::plot.inlpal
Plot(Pal(n = 20))

x <- datasets::volcano
Pal <- SetHinge(x, hinge = 140, scheme = c("abyss", "dem1"))
filled.contour(x, color.palette = Pal, nlevels = 50)

# Data range (x)
hinge <- 0; n <- 20
op <- par(mfrow = c(5, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(c(-10,  0), hinge)(n))
Plot(SetHinge(c( -7,  3), hinge)(n))
Plot(SetHinge(c( -5,  5), hinge)(n))
Plot(SetHinge(c( -3,  7), hinge)(n))
Plot(SetHinge(c(  0, 10), hinge)(n))
par(op)

# Hinge value (hinge)
x <- c(-5, 5); n <- 255
op <- par(mfrow = c(5, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(x, hinge = -6)(n))
Plot(SetHinge(x, hinge = -2)(n))
Plot(SetHinge(x, hinge =  0)(n))
Plot(SetHinge(x, hinge =  2)(n))
Plot(SetHinge(x, hinge =  6)(n))
par(op)

# Color scheme (scheme)
x <- c(-10, 10); hinge <- -3; n <- 255
op <- par(mfrow = c(3, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(x, hinge, scheme = "oleron")(n))
Plot(SetHinge(x, hinge, scheme = "BuRd")(n))
Plot(SetHinge(x, hinge, scheme = c("ocean", "copper"))(n))
par(op)

# Alpha transparency (alpha)
x <- c(-5, 5); hinge <- 0; scheme <- c("drywet", "hawaii"); n <- 255
op <- par(mfrow = c(4, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(x, hinge, scheme, alpha = 1.0)(n))
Plot(SetHinge(x, hinge, scheme, alpha = 0.5)(n))
Plot(SetHinge(x, hinge, scheme, alpha = c(1.0, 0.5))(n))
Plot(SetHinge(x, hinge, scheme, alpha = c(0.5, 1.0))(n))
par(op)

# Reverse colors (reverse)
x <- c(-10, 10); hinge <- -3; n <- 255
op <- par(mfrow = c(6, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(x, hinge, "roma", reverse = FALSE)(n))
Plot(SetHinge(x, hinge, "roma", reverse = TRUE)(n))
Plot(SetHinge(x, hinge, c("davos", "hawaii"), reverse = FALSE)(n))
Plot(SetHinge(x, hinge, c("davos", "hawaii"), reverse = TRUE)(n))
Plot(SetHinge(x, hinge, c("davos", "hawaii"), reverse = c(TRUE, FALSE))(n))
Plot(SetHinge(x, hinge, c("davos", "hawaii"), reverse = c(FALSE, TRUE))(n))
par(op)

# Allow bias (allow_bias)
x <- c(-3, 7); n <- 20
op <- par(mfrow = c(4, 1), oma = c(0, 0, 0, 0))
Plot(SetHinge(x, hinge = 0, allow_bias = TRUE)(n))
Plot(SetHinge(x, hinge = 0, allow_bias = FALSE)(n))
Plot(SetHinge(x, hinge = 4, allow_bias = TRUE)(n))
Plot(SetHinge(x, hinge = 4, allow_bias = FALSE)(n))
par(op)

}
\author{
J.C. Fisher, U.S. Geological Survey, Idaho Water Science Center
}
\keyword{color}
